{"mappings":"AAsBA,IAAaA,EAdbC,QAAQC,IACN,2CACkC,kCAEpCD,QAAQC,IACN,iD,kCAIFD,QAAQC,IACN,wCACgC,kCAGrBF,EAUT,QATK,IAAIG,SAAQC,IACjB,MAAMC,GAYaC,EAZQ,IAYHC,EAZS,KAa5BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtD,IAAuBA,EAAKC,EAVxBI,YAAW,KACTP,EAAQ,C,MAAEJ,E,KAAOK,GAAO,GACvBA,EAAK,KAKTO,MAAKC,GAAKZ,QAAQC,IAAIW,KACtBC,OAAMC,GAAKd,QAAQC,IAAIa","sources":["src/js/03-racetrack.js"],"sourcesContent":["const horses = [\n  'Secretariat',\n  'Eclipse',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscuit',\n];\n\nconsole.log(\n  'ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!',\n  'color: broun; font-size: 14px;'\n);\nconsole.log(\n  `üéâ –ü–æ–±–µ–¥–∏–ª ${1}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${1}\n//     –≤—Ä–µ–º–µ–Ω–∏`,\n  'color: green; font-size: 14px;'\n);\nconsole.log(\n  'üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.',\n  'color: blue; font-size: 14px;'\n);\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nrun('Mango')\n  .then(x => console.log(x))\n  .catch(e => console.log(e));\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// let raceCounter = 0;\n// const refs = {\n//   startBtn: document.querySelector('.js-start-race'),\n//   winnerField: document.querySelector('.js-winner'),\n//   progressField: document.querySelector('.js-progress'),\n//   tableBody: document.querySelector('.js-results-table > tbody'),\n// };\n\n// refs.startBtn.addEventListener('click', onStart);\n\n// function onStart() {\n//   raceCounter += 1;\n//   const promises = horses.map(run);\n\n//   updateWinnerField('');\n//   updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\n//   determineWinner(promises);\n//   waitForAll(promises);\n// }\n\n// function determineWinner(horsesP) {\n//   Promise.race(horsesP).then(({ horse, time }) => {\n//     updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}\n//     –≤—Ä–µ–º–µ–Ω–∏`);\n//     updateResultsTable({ horse, time, raceCounter });\n//   });\n// }\n\n// function waitForAll(horsesP) {\n//   Promise.all(horsesP).then(() => {\n//     updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n//   });\n// }\n\n// function updateWinnerField(message) {\n//   refs.winnerField.textContent = message;\n// }\n\n// function updateProgressField(message) {\n//   refs.progressField.textContent = message;\n// }\n\n// function updateResultsTable({ horse, time, raceCounter }) {\n//   const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n//   refs.tableBody.insertAdjacentHTML('beforeend', tr);\n// }\n\n// /*\n//  * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞\n//  */\n\n// /*\n//  * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤\n//  */\n\n// function run(horse) {\n//   return new Promise(resolve => {\n//     const time = getRandomTime(2000, 3500);\n\n//     setTimeout(() => {\n//       resolve({ horse, time });\n//     }, time);\n//   });\n// }\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// }\n"],"names":["horse","console","log","Promise","resolve","time","min","max","Math","floor","random","setTimeout","then","x","catch","e"],"version":3,"file":"03-racetrack.530fd174.js.map"}