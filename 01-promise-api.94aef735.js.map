{"mappings":"AAQgB,IAAIA,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,KACLH,GACFF,EAAQ,kEAEiCC,EAApC,mDAAmF,GACzF,IAAK,IAgBPK,MAXH,SAAqBC,GACnBC,QAAQC,IAAI,8BACZD,QAAQC,IAAI,KAAGF,I,IAUdD,MAAKI,IAGJ,MAFAF,QAAQC,IAAIC,GAEN,IAAIC,MAAM,uBAAuB,IAIxCL,MAAKM,IACJJ,QAAQC,IAAIG,EAAE,IAEfC,OAAMC,GAASN,QAAQC,IAAIK","sources":["src/js/01-promise-api.js"],"sourcesContent":["/*\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n    }\n    reject('Промис выполнился с ошибкой (отклонён, rejected)');\n  }, 1000);\n});\n\n// promise.then(onFullFilled, onRejected);\n\nfunction onFulfilled(result) {\n  console.log('onFulfilled -> onFulfilled');\n  console.log(`✅ ${result}`);\n}\n\nfunction onRejected(error) {\n  console.log('onRejected -> onRejected');\n  console.log(`❌ ${error}`);\n}\n\npromise\n  .then(onFulfilled)\n  .then(x => {\n    console.log(x);\n\n    throw new Error('Error in second then');\n\n    return 10;\n  })\n  .then(y => {\n    console.log(y);\n  })\n  .catch(error => console.log(error));\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 1000);\n// });\n\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду выполнен в любом случае'));\n"],"names":["Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log","x","Error","y","catch","error"],"version":3,"file":"01-promise-api.94aef735.js.map"}